---
title: 'Lab2: Reproducible publishing and literate programming with Quarto'
author: "Material adapted from Charlotte Soneson"
date: "09/07/2024"
format:
    html:
        embed-resources: true
        callout-appearance: default
        table-of-contents: true
#editor_options: 
#  markdown: 
#    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Quarto and literate programming

In this lab you will learn the basics of literate programming and to use
the literate programming and manuscript editing system [Quarto](https://quarto.org/). Quarto enables you to produce PDF documents (manuscripts) just as you would do in $\LaTeX$, but also HTML pages---such as the one you are currentl reading---and whole webpages. It even exports to Word-docx format.<br>

## What is literate programming?

The term '[literate programming](http://www.literateprogramming.com/)'
was introduced by Donald Knuth in 1984. It refers to a programming
paradigm where in one single source file you have:

-   parts of explanation of the analysis in natural language (such as
    English)
-   interspersed with **chunks** of executable source code.<br>

This single source file is then used to create both machine executable
**code** (effectively, extracting the code chunks) and a comprehensive
human-readable report containing both the **natural language text** and
the **results** of running the code. A recent
[publication](https://academic.oup.com/bib/article/24/6/bbad375/7326135)
by Ziemann et al. considers literate programming one of the five pillars
of reproducible computational research:<br>

<center/>

![](figs/reproducibility-pillars.jpeg)

</center>

<br>

Some of the advantages of using literate programming are:

-   since the report contains both the code and the output, we know
    precisely **which code was executed to generate a specific result**
    (compare this to copy-pasting your figures from the RStudio viewer
    into a Word document), and the text and results are arranged in a
    logical and consistent way. Circumventing the copy-pasting of
    results into reports also saves time.
-   it makes it easy to provide extensive **documentation and
    explanations of the code**
-   it provides **built-in checks** that the given code *actually
    runs* - if not, no output report is generated.<br><br>

Example of literate programming environment are "Rmarkdown" (R) and
"Jupyter notebook" (python)

# What is R Markdown?

R Markdown lets you write dynamic, reproducible documents in R
(actually, it can also contain code in other languages like python or
bash!).<br>

-   An R Markdown document can contain *regular text* as well as *code
    chunks*, *equations* and *images*.
-   The document can be rendered into many *different output formats*,
    such as html, pdf, Microsoft Word, websites, and slideshows (for the
    latter, check out [xaringan](https://slides.yihui.org/xaringan/#1)).
-   To install R Markdown you need to install the specific packages, refer to [Lab1.0_setup.html](Lab1.0_setup.html)

# What is Quarto?

-   [Quarto](https://quarto.org) is an open-source publishing system
    built on markdown. It is developed and maintained by Posit.
-   Quarto can be thought of as "next generation" R Markdown, combining
    what was previously spread across many packages (including
    `rmarkdown`, `bookdown`, and `xaringan`) into one system. <br>
-   Quarto is fundamentally multi-lingual, for example it can be used to
    write python code without requiring R to be present (R Markdown can
    also contain python code, but R needs to be present in order to
    compile the report).
-   For a more detailed overview, see e.g. [the Quarto
    FAQ](https://quarto.org/docs/faq/rmarkdown.html#quarto-sounds-similar-to-r-markdown.-what-is-the-difference-and-why-create-a-new-project)
    or [this blog
    post](https://yihui.org/en/2022/04/quarto-r-markdown/).

##### Quarto and R Markdown

-   R Markdown and Quarto are very similar in terms of the syntax; in
    many cases simply changing the file extension from `.Rmd` to `.qmd`
    or vice versa will give a valid file.
-   In this workshop, we will use Quarto, but most of the basics that we
    are going to cover works perfectly fine also with R Markdown.
-   We will use R and
    [RStudio](https://posit.co/products/open-source/rstudio/) (in case
    you are interested you can checkout
    [here](https://bioconductor.github.io/CSAMA-labs/quarto-intro/quarto.html)
    the corresponding steps to use Quarto in [Visual Studio
    Code](https://code.visualstudio.com/))

# Creating a .qmd file in RStudio {#custom}

Let's create our first Quarto document (`.qmd` file) in RStudio. <br>

-   Click on `New File`, and select `Quarto Document` (or, equivalently,
    go via the menu `File` -\> `New File` -\> `Quarto Document`).

![](figs/create-qmd.png){width="200px"}<br>

-   In the dialog that comes up, you give the document a "Title" and
    type your name into the "Author" field.
-   You can select the default output format, for now, let's select
    "HTML" as the output format (this can be changed later). Note that
    generating pdf or Word output requires additional software to be
    available on your system.<br>

![](figs/name-qmd.png){width="500px"}<br>

-   Click "Create", your first Quarto document will open in the RStudio
    IDE, in the scripts and files panel.<br>
-   Before we look at the content, **save** the document to disk: either
    by clicking on the `save` button (the floppy disk at the top of the
    document) or by going via `File` -\> `Save` - here, we will use the
    name `qmd-example.qmd`.

# Rendering the document

To render a document means to go from the `.qmd` format to create a new
file in your final format - i.e. `.html`, `.pdf`, `.doc` etc. <br> There
are several ways to do it, in RStudio

-   one way is to click on the
    ![](figs/qmd-render-button.png){width="80px"} button above the
    document (or use the keyboard shortcut `Ctrl`+`Shift`+`K`, or
    `Cmd`+`Shift`+`K` on macOS).
-   another option is to type the following in the R console (assuming
    that the `quarto` package is installed and that the `.qmd` file is
    saved as `qmd-example.qmd` in the current working directory):

```{r}
#| eval: false

quarto::quarto_render("qmd-example.qmd")
```

Either of these options will render the document in a new R session. The
figure below illustrates what happens 'under the hood' when a document
is rendered:

![](figs/rstudio-qmd-how-it-works.png) Source:
<https://quarto.org/docs/get-started/hello/rstudio.html>

More settings related to the rendering can be found by clicking on the
little gear next to the Render button:

![](figs/qmd-render-settings.png)

::: {.callout-tip title="Rendering an R Markdown document"}
To use create an R Markdown document you can repeat the [same
steps](#custom) as for the Quarto document, selecting `R Makrdown` as
new file.<br>

To render an R Markdown document, you can click the `Knit` button in
RStudio, or type (assuming `rmarkdown` package is install)

```{r}
#| eval: false

rmarkdown::render("rmd-example.rmd")
```

However, in this case there is an important difference between the two
ways of rendering the document: clicking on the `Knit` button will
render the document in a new R session, while `rmarkdown::render()` will
by default execute the code in the document in the "parent environment"
(the current active R session).
:::

For now, let's click on the `Render` button to generate an HTML file
from our `.qmd` document. <br><br>

# Quarto doc structure
Now that we've tried the process of generating the output file, let's
take a look at the structure of the `.qmd` file.

## 1. The YAML header

The first lines form the so called *YAML header* - this is where you specify what **type of document** 
you want to build from the `.qmd` file, and provide details
about **styles** and **themes**. We can see that the template document generated
by RStudio contains the information that we specified when creating the
file.

```{verbatim}
---
title: "My first Quarto document"
author: "Jane Doe"
format: html
---
```
If we want to change the output format, this can be done in the YAML
header (i.e., there's no need to create a new document from scratch), any idea on how to do it?

:::{.callout-warning title="exercise " icon="false"}
Try to change the output format from HTML to PDF. 

<details>

<summary><b> Solution - format to pdf </b></summary>
For example, if we want a PDF file rather than an HTML file, we change
the last line in the YAML header to:
```{verbatim}
format: pdf
```
</details>
:::
Now try to render. Did it work? Remember you need to install some additional software 
to render to PDF, specifically LaTex (go to the [Lab1.0_setup.html](Lab1.0_setup.html) if it didn't work or ask the TAs) .<br>

<br>

Let's start adding some more configuration:<br>
We can configure many aspects of our document via the YAML fields. The
available fields depend to some extent on the selected format. [This
website](https://quarto.org/docs/reference/formats/html.html) lists the
options available for HTML files.

 + In our example document, let's add a *table of contents* (toc) and change the
 *theme*. You can find a list of available themes
 [here](https://www.datadreaming.org/posts/2018-04-11-r-markdown-theme-gallery/2018-04-11-r-markdown-theme-gallery.html). <br>
 Under the format section, specify the configuration for the html (note the **indentation** under `format` - this is
important for correct parsing of the YAML): 
```{verbatim}
format: 
    html:
        toc: true
        theme: cosmo
```

Now render, can you see what changed? <br>
  
  + We will also add a line to make the HTML file *self-contained*
(`embed-resources: true`). A self-contained HTML file is **larger**, but can be
**shared or moved without external dependencies**.
Without this line, any external dependencies of the HTML file (images, style sheets, etc) will be placed in a
separate folder, which must be distributed along with the **HTML file** for
proper rendering.
Our YAML header will now look something like this:

```{verbatim}
---
title: "My first Quarto document"
author: "Jane Doe"
format: 
    html:
        toc: true
        theme: cosmo
        embed-resources: true
---
```

**Multiple formats**: <br>

  + For example, say we would like the possibility to render the
document into html format AND also into PDF format. We would like to have a **table of content in both cases.** 
So far, the options that we specified are applied specifically to html output format. <br>
If we want to apply the specified options across any output format, we can also **define them on the top level**, rather than under the
specific format. <br>
This could be as follows:

```{verbatim}
---
title: "My first Quarto document"
author: "Jane Doe"
toc: true
format: 
    html:
        theme: cosmo
        embed-resources: true
    pdf: default
---
```

Note that table-of-contents option `toc: true` is now outside the format option <br>

 + Note that some options are specific to each format, for example the `theme` can be used with html format only. 
(You can check out the options available for each file format on doc quarto page, e.g. [PDF options](https://quarto.org/docs/reference/formats/pdf.html))<br>
 + If we add multiple possible formats as in the example above, we can
**choose the rendering format** in the little dropdown menu that then
appears next to the 'Render' button:

![](figs/qmd-render-multiple.png)

By default, the format that is specified first in the YAML will be used.
<br>

**Add the date**: <br>
An essential option is the `date`, this allows you to keep track on when the document has been created.<br>
There are different ways to do include the date in the header. <br>
Can you think of how to add the date of today without looking at the solutions?

::: {.callout-warning title="Exercise" icon="false"}
Add a date to the YAML header. See
[here](https://quarto.org/docs/reference/dates) for information about
how to specify dates in Quarto.

<details>

<summary><b> Solution - fixed date </b></summary>

```{verbatim}
---
title: "My first Quarto document"
author: "Jane Doe"
date: "2024-06-11"
date-format: "long"
format: 
    html:
        toc: true
        theme: cosmo
        embed-resources: true
---
```

</details>

<details>

<summary><b> Solution - using the date when the document is rendered </b></summary>
With the two following solutions, we can add a flexible date to our document. This means that every time that we render our document, the date is updated. This helps you keep track on when the final document has been produced.
  
  a. using R code
In R you can get the date using `Sys.Date()`, and you can recall this in the YAML header as follows:

```{verbatim}
---
title: "My first Quarto document"
author: "Jane Doe"
date: "`r Sys.Date()`"
date-format: "long"
format: 
    html:
        toc: true
        theme: cosmo
        embed-resources: true
---
```
  
  b. using `today` quarto keyword (does not work in R Markdown) 

```{verbatim}
---
title: "My first Quarto document"
author: "Jane Doe"
date: today
date-format: "long"
format: 
    html:
        toc: true
        theme: cosmo
        embed-resources: true
---
```

</details>
:::

## 2. The body of the document

Below the YAML header, the rest of the `.qmd` document consists of a mix
of regular text and code chunks. The text is formatted according to
[`markdown`
syntax](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf)
(see also [this page](https://www.markdownguide.org/basic-syntax/)). 

#### Headers
For example headers (of different levels) are generated by prepending
(different numbers of) hash symbols (`#`) to the header text:

```         
# Header 1
## Header 2
### Header 3
```
Note that a line will actually be a header only if there is a blank line above. For example:

```
Some text here

# this will be a header of level 1
Some other text here
## this will not be a header
```

#### New lines
Very important: a line break in the `.qmd` document does not correspond to a line break on the output file. To do a new line, you can 
  
  + write `<br>` add the end of your line
```
method for new line: <br>
here is a new line
```
Will render:<br>
      *method for new line:*<br>
      *here is a new line*

  + to do a change of paragraph, you can insert a blank line
```
method for new paragraph: 

here is a new line in a new paragraph
```
Will render:<br>
*method for new paragraph:*

*here is a new line in a new paragraph*


#### **Bold**, *italic* 

 + **Bold** **text** is obtained by adding `__` or `**` to each side of the
text, and 
  + *italic* *text* is obtained by adding `_` or `*` to each side
of the text.

::: {.callout-tip title="Tip"}
To convert an entire word or multiple ones in **bold** or *italic*, highlight that word and type *, look at what happens.<br>
Try it out with the parentheses (, [, { and the back tick `
:::

#### Code chunks
Code chunks are generated with the following syntax:

```{{r}}
x <- 1 + 1
```

   - The `{r}` part indicates that the chunk contains R code. 
   It is possible to use other engines (e.g., python or bash) by replacing the `r` in the
   chunk header (note that *additional packages*, as well as a functional
   python installation, may be required to, e.g., execute python code).
   - Rather than explicitly typing the code chunk, we can use the keyboard
   shortcut `Ctrl`+`Alt`+`I` (or `Cmd`+`Option`+`I` on macOS) in RStudio. 
   It will automatically add an R code chunk on the next line.
   - It is also useful to know that we can **directly execute a line** in a code
   chunk in the `.qmd` file by placing the cursor on the line and pressing
   `Ctrl`+`Enter` (or `Cmd`+`Enter` on macOS). 
   - **A whole chunk** can be executed by clicking on the little green arrow ![](figs/green_arrow_chunk.png){height=24px} in the top right corner of the chunk. 
   The grey arrow ![](figs/grey_arrow_chunk.png){height=24px} executes all chunks preceding the current
   chunk.

![](figs/qmd-execute-arrows.png)


::: {.callout-tip title="Tip"}
Depending on your keyboard you will find the backtick ` in different position<br>
On a Windows QWERTY keyboard:
![](figs/qwerty-backtick-windows.png) <br>
Source:
<https://superuser.com/questions/254076/how-do-i-type-the-tick-and-backtick-characters-on-windows><br>

On a Mac QWERTY keyboard:
![](figs/qwerty-backtick-mac.jpeg){width=400px}
:::




We can also include inline R code, enclosed in single backticks:
`` `{{r}} x + 1` `` (as for the code chunks, we can use different code
engines here as well). This is useful e.g. if we want to refer to values
of specific variables directly in the text. A frequent use of this
syntax can be seen in the YAML header above - see how the current date
was obtained by executing the R function `Sys.Date()`.

::: {.callout-warning title="Exercise" icon="false"}
Let's now practice what we just learned. In your example `.qmd`
document, add a suitable header and a code chunk where you print the
first six rows of the built-in `iris` dataset. Below the code chunk, add
a sentence where you include the number of observations (rows) in the
`iris` dataset.

<details>

<summary><b> Tips </b></summary>

  + the `iris` dataset already exists in R, try to type `head(iris)` on the console, what is the output?
  + render in html, and if you can to pdf too
</details>

<details>

<summary><b> Possible solution - try it first yourself </b></summary>

 ````{verbatim}
---
title: "My first Quarto document"
author: "Jane Doe"
toc: true
format: 
    html:
        theme: cosmo
        embed-resources: true
    pdf: default
---


# Analysis of iris dataset

```{r}
print(head(iris))
```

These are the first 6 rows of the `iris` dataset 
that contains a total of `{{r}} nrow(iris)` observations 
 ````
</details>

:::


# Customizing code chunks

In addition to the language indicator, there are many other ways of
customizing code chunks with so called '**chunk options**'. <br>
Chunk options are specified inside the chunk, preceded by `#|`.<br>

 + For example, we can decide whether the code should be evaluated at all (`eval`) 
 + whether the code should be shown or hidden in the final report (`echo`)
 + and the size of any figures generated by the code. <br> We can also add captions and alt-text for
any displayed figures, for increased accessibility. <br>

The following chunk will be printed `echo: true`, but not executed `eval: false`:

```{{r}}
#| echo: true
#| eval: false

1 + 1
```

For additional controls related to chunk execution, see [this
page](https://quarto.org/docs/computations/execution-options.html).<br>

  + The options can also be set globally in the YAML header, under the `execute`
  directive. Specifications in a given chunk will override the global
  settings.<br>
  + It is often useful to assign `labels` to the chunks. This makes it easier
  to navigate the document and find the source of any errors, and
  additionally means that any output figures generated in the document
  will be named according to the chunk where they were generated. <br> In
  RStudio, you can navigate between sections and chunks in the lower left
  corner of the editor panel:

![](figs/qmd-navigate.png)

To label a chunk, add a suitable name as an option:

```{{r}}
#| label: addition_chunk

1 + 1
```

::: {.callout-warning title="Exercise" icon="false"}
Let's now practice what we just learned. In your example `.qmd`
document, 

  1. print the first 6 rows hiding the chunk that generates the output 
  2. create a second chunk in which you print the species present in the dataset
  3. create a third chunk in which you output the summary of sepal measurements: lenght and width
  4. set chunk options so that in the final report you show the code only for the last chunk

<details>

<summary><b> Possible solution - try it first yourself </b></summary>
look at the `qmd-example.qmd` in the folder of this lab
</details>
:::

# Markdown editing modes

Above, we opened and interacted with the `.qmd` document in 'Source'
mode. However, RStudio (version 1.4 and newer) also allows us to view
and edit the document in 'Visual' mode. In RStudio, we can switch mode
by clicking on the corresponding button above the document:

![](figs/rmd-mode.png)

This can also be selected in the dialog box when the file is initially
created.

In 'Visual' mode, we can edit the document in a perhaps more intuitive
way (or, at least, in a way that is more similar to the final rendered
version). For example, adding headers can now be done by selecting the
desired header level from a dropdown menu. We can swap between the two
editing modes at any time. This can also be helpful in order to learn
the markdown syntax for specific formatting options.

# Parameterized reports

Sometimes, we have a template `.qmd` file from which we would like to
generate multiple output files, each with a different value of a given
parameter. Instead of generating a separate `.qmd` file for each of
these parameter values, we can make use of so called [*parameterized
reports*](https://quarto.org/docs/computations/parameters.html). To
parameterize your `.qmd` file, add a section in the YAML header defining
the parameters that will be used, and provide a default value:

```{verbatim}
---
title: "My first Quarto document"
author: "Jane Doe"
date: "`r Sys.Date()`"
date-format: "long"
format: 
    html:
        toc: true
        theme: cosmo
        embed-resources: true
params:
    species: "setosa"
---
```

You can then use the parameter anywhere in the document via the R syntax
`params$species`. Any number of parameters can be specified in this way.
Now, if the document is rendered via the `Render` button, the default
value of each parameter will be used. To change the value, use the
`quarto_render()` function from the `quarto` R package and specify the
desired parameter values via the `execute_params` argument:

```{r}
#| eval: false

quarto::quarto_render("qmd-example.qmd", 
                      execute_params = list(species = "virginica"))
```

We can also set the name of the output file (we may want this to reflect
the parameter value):

```{r, eval=FALSE}
quarto::quarto_render("qmd-example.qmd", 
                      execute_params = list(species = "virginica"),
                      output_file = "virginica_report.html")
```
::: {.callout-warning title="Exercise" icon="false"}
Take your `qmd-example.qmd`, now make the code chunk about the summary of sepal measurements specific for a species.<br>
Output the reports for each one of the species in a specific file. 

<details>
<summary><b> Possible solution - try it first yourself </b></summary>
1. Add the to the header
```{verbatim}
params:
    species: "setosa"
```
2. Change the chunk about the summary of measurement using `params$species`:
````
Summary of the measurements of sepal length and width in the species **`{{r}} print(params$species)`**:

```{{r}}
#| echo: true
#| label: summary_species
summary(iris[iris$Species == params$species, "Sepal.Length"])
summary(iris[iris$Species == params$species, "Sepal.Width"])
```
````
3. output the reports, repeat the command by changing the name of the species
```{r, eval=FALSE}
quarto::quarto_render("qmd-example.qmd", 
                      execute_params = list(species = "setosa"),
                      output_file = "setosa_report.html")
```

</details>

:::

# Session info

In order to keep a record of the package versions used to generate a
given output file, it is useful to include a code chunk providing the
session information in the end of every `.qmd` file. Add the following
to your example `.qmd`:

```{{r}}
sessionInfo()
```

As a bonus, with a bit of HTML, we can even make it collapsible, to take
less space but still be available if requested.

````         
<details>
<summary><b>
Session info
</b></summary>
```{{r}}
sessionInfo()
```
</details>
````

::: {.callout-warning title="Exercise" icon="false"}
Try it out! Add the lines above to your `qmd-example.qmd` and see how it looks like
:::

# Images

Images can be included in `.qmd` files using the following syntax:

```         
![](path/to/image.png)
```

Alternatively, we can use `knitr`:

```{{r}}
knitr::include_graphics("path/to/image.png")
```

Or directly HTML:

```         
<img src="path/to/image.png" width="90%"/>
```

# Assembling figure panels within R

Using the workflow described above, we have a way to reproducibly
generate figure panels starting from a suitably processed input data
file. Remember the figure you just created in the previous lab, we used the 
[`patchwork`](https://patchwork.data-imaginist.com/) R package. This is
not the only R package that allows this type of workflow - you can also
have a look at
[`cowplot`](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html).
In python, there is a corresponding package
[`patchworklib`](https://pypi.org/project/patchworklib/).

The idea behind these packages is that we create the individual figure
panels as usual, and the use the capabilities of (e.g.) `patchwork` to
assemble the panels in a suitable configuration.

We can also include **pre-generated image files** (e.g., in png format).
This can be useful if we want to generate figures containing panels with
schematics or other types of images that are not generated in R. One way
to get such files into R and a format compatible with `patchwork` or
`cowplot` is to use the `ggdraw()` and `draw_image()` functions from the
`cowplot` package.

```{r}
#| fig.height: 4
#| fig.width: 9

puppy <- cowplot::ggdraw() +
    cowplot::draw_image("https://publicdomainvectors.org/photos/johnny_automatic_puppy.png")
puppy
```

We can also add a shared title(`title`), a caption(`caption`), and labels(`tag_levels`) for the individual
panels. In this way, it is often possible to reproducibly generate
figures that can be directly used in a publication.

Many more examples and guidance can be found on the [patchwork
website](https://patchwork.data-imaginist.com/).


# Reproducible publishing with journal templates

So far, we have seen how we can write reports and generate complete
figures in a reproducible way. This type of reports could, for example,
be used as supplementary material for a manuscript. To generate the
actual manuscript file, we would still need to paste the results and the
generated figures into the Word document that will be submitted to the
journal. However, Quarto also provides [journal
templates](https://quarto.org/docs/journals/) for several journals,
which means that we can directly write our paper using literate
programming, and submit the resulting Word/LaTeX/pdf file to the
journal. If your favorite journal does not already have a template, you
can also create your own. The setup makes it easy to change between
different journal styles, still using the same underlying source file.
This approach works well for "not-too-computational" manuscripts, 
**where all computations can be run in a single file, and are sufficiently quick**
that it is not a problem to rerun them each time anything in the
manuscript changes.

Let's try this out - we'll create an example journal article, using the
style from the PLOS family of journals. Typing the following code into a
terminal window will initialize a new `.qmd` file following this journal
template style:

```{bash}
#| eval: false

quarto use template quarto-journals/plos
```

The resulting file can then be edited and expanded upon like any other
Quarto file. If you just want to install the journal format extension
(without creating a new document), e.g. to use it in an existing
document, you can do that by running the following code from within the
target directory:

```{bash}
#| eval: false

quarto add quarto-journals/plos
```

# Quarto Manuscripts

An even more comprehensive toolbox for publishing manuscripts is
provided by the *Quarto Manuscripts* framework. Here, each Quarto
manuscript is its own [Quarto
project](https://quarto.org/docs/projects/quarto-projects.html) (not
just a single file). The manuscript will be rendered in multiple
formats, which can all be accessed via a generated website. Separate
notebooks can also be used as a source of content and computations.
Thus, this approach, while more complex than what we have seen before,
is really aimed at producing fully reproducible manuscripts for projects
involving lots of computation, perhaps in different languages, which can
not all be re-executed every time the manuscript text changes.

An example can be seen
[here](https://notebooks-now.github.io/submission-quarto-full/). To
initialize such a manuscript, we have to create a Quarto project. This
can be done from the command line as follows:

```{bash}
#| eval: false

quarto create project manuscript my_awesome_manuscript
```

This will create a Quarto project in a new folder named
`my_awesome_manuscript`, and you can further choose to open it in either
RStudio or Visual Studio Code.

# Final tips

-   Always include the session info.
-   Avoid hardcoded absolute paths, they will make it impossible for
    someone else to reproduce your analysis.
-   With parameterized reports, it's helpful to print out the values of
    the parameters somewhere in the report for reproducibility purposes,
    as the final report may have been generated from the command line
    with parameter values different from the default ones contained in
    the source file.

# Conclusion

In this workshop, we have seen how we can use Quarto to generate
reproducible reports containing both text, code and output. 
Most of the things that have been described can be applied to R Markdown. 
Of course this is not the only way to make analyses reproducible - done correctly,
a regular script can be just as reproducible. One nice aspect of
literate programming, however, is that you can be sure that if the
document compiles, the code actually works, you will see exactly how
each figure was generated, and there is no way to 'leave out' or miss
any details. With a script, you need some level of trust that this was,
in fact, the code that was used to generate the saved figures. In
addition, there are many other aspects that are essential for
reproducibility that we have not touched upon here, including making all
data accessible, and if possible providing a reproducible software
environment (for example, using conda environments or docker images).

# Resources

-   [RStudio keyboard
    shortcuts](https://bookdown.org/yihui/rmarkdown-cookbook/rstudio-shortcuts.html)
-   [Quarto webpage](https://quarto.org/)
-   [Quarto introductory
    tutorial](https://quarto.org/docs/get-started/hello/rstudio.html)
-   [Quarto authoring
    guide](https://quarto.org/docs/get-started/authoring/rstudio.html)
-   [More details about article layout in
    Quarto](https://quarto.org/docs/authoring/article-layout.html)
-   [R Markdown cheat sheet from
    RStudio](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)
-   [R Markdown reference
    guide](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf)
-   [R Markdown crash
    course](https://zsmith27.github.io/rmarkdown_crash-course/index.html)
-   [R Markdown website](https://rmarkdown.rstudio.com/)
-   [Lessons on R Markdown](https://rmarkdown.rstudio.com/lesson-1.html)
-   [R Markdown - the definitive
    guide](https://bookdown.org/yihui/rmarkdown/)
-   [R Markdown
    cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/)
-   [Blog post on Quarto vs
    Rmarkdown](https://yihui.org/en/2022/04/quarto-r-markdown/#:~:text=For%20R%20users%2C%20Quarto%20uses,implementation%20of%20figure%20cross%2Dreferences.)
-   [Quarto/R Markdown - what's
    different](https://laderast.github.io/qmd_rmd/#/title-slide)
-   [Quarto extensions - journal
    articles](https://quarto.org/docs/extensions/listing-journals.html)
-   [Reproducible manuscripts with Quarto (talk by JJ
    Allaire)](https://jjallaire.quarto.pub/reproducible-manuscripts-with-quarto/#/title-slide)
-   [Quarto webR extension for building interactive
    websites](https://quarto-webr.thecoatlessprofessor.com/)
-   [Hello Quarto! Keynote from
    rstudio::conf(2022)](https://www.youtube.com/watch?v=p7Hxu4coDl8)
-   [Quarto introduction in R4DS book](https://r4ds.hadley.nz/quarto)
-   [A Primer on dynamic reporting](https://zenodo.org/records/8354360)
-   [Reproducible manuscripts with Quarto (talk by Mine
    Cetinkaya-Rundel)](https://mine.quarto.pub/manuscripts-conf23/#/title-slide)
